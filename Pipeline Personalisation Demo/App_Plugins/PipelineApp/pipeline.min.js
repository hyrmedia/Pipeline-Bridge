angular.module("umbraco").controller("Pipeline.Pipeline.Browse",function($scope,$routeParams,pipelineResource,organisationResource,notificationsService,navigationService,dialogService,entityResource,mediaResource,iconHelper,$filter,localizationService){$scope.content={statusId:$routeParams.id,isArchive:$routeParams.id==-1,isUnassigned:$routeParams.id==-2,title:$routeParams.id==-2?localizationService.localize("pipeline_unassigned"):$routeParams.id==-1?localizationService.localize("recycleBin"):localizationService.localize("pipeline_showAll")};$routeParams.id>0&&pipelineResource.getStatusById($routeParams.id).then(function(response){$scope.content.title=response.data.Name})});angular.module("umbraco").controller("Pipeline.PipelineEditController",function($scope,$routeParams,contactResource,taskResource,pipelineResource,licenseResource,organisationResource,propResource,notificationsService,navigationService,dialogService,entityResource,mediaResource,iconHelper,$filter,localizationService){$scope.loaded=!1;$scope.Statuses=[];pipelineResource.getUsers().then(function(response){$scope.Users=response.data});pipelineResource.getStatuses().then(function(response){$scope.Statuses=response.data});organisationResource.getAll().then(function(response){$scope.Organisations=response.data});contactResource.getAll().then(function(response){$scope.Contacts=response.data});$scope.content={tabs:[{id:1,label:localizationService.localize("pipeline_details")},{id:2,label:localizationService.localize("pipeline_timeline")}]};var datePickerConfig={view:"datepicker",config:{pickDate:!0,pickTime:!1,pick12HourFormat:!1,format:"DD/MM/YYYY"}};$scope.createdDatepicker=angular.extend({},datePickerConfig,{value:new Date});$scope.completeDatepicker=angular.extend({},datePickerConfig,{value:new Date});$scope.getCustomProps=function(){propResource.getPropsByType("pipeline").then(function(response){$scope.customprops=response.data;$scope.customprops.reverse().forEach(function(tab){tab.id=$scope.content.tabs.length+1;$scope.content.tabs.splice(1,0,{id:$scope.content.tabs.length+1,label:tab.name});var customProps=angular.fromJson($scope.pipeline.CustomProps);$scope.pipeline.CustomProps&&tab.items.forEach(function(prop){var match=_.findWhere(customProps,{id:prop.id});match&&(prop.value=match.value)})});$(".tab-content>.tab-pane:first").addClass("active");$scope.loaded=!0})};$routeParams.id==-1?($scope.pipeline={},$scope.pipeline.Tasks=[],$scope.pipeline.StatusId=$routeParams.statusId||0,$scope.getCustomProps(),licenseResource.checkPipelineLimit().then(function(response){response.data==="false"&&(notificationsService.error(localizationService.localize("pipeline_licenseLimit")),location.href="#/pipeline")})):pipelineResource.getPipelineById($routeParams.id).then(function(response){$scope.pipeline=response.data;$scope.pipeline.Obscured&&(notificationsService.error(),location.href="#/pipeline");$scope.$watch("Statuses",function(){$scope.Statuses.forEach(function(obj){$scope.pipeline.StatusId&&obj.Id==$scope.pipeline.StatusId&&($scope.pipeline.Status=obj)})});var createdDate=Date.parse($scope.pipeline.DateCreated)>0?Date.parse($scope.pipeline.DateCreated):new Date,completeDate=Date.parse($scope.pipeline.DateComplete)>0?Date.parse($scope.pipeline.DateComplete):new Date;$scope.createdDatepicker.value=$filter("date")(createdDate,"dd/MM/yyyy");$scope.completeDatepicker.value=$filter("date")(completeDate,"dd/MM/yyyy");$scope.getCustomProps()});$scope.save=function(){if($scope.pipeline.DateCreated=$scope.createdDatepicker.value,$scope.pipeline.DateComplete=$scope.completeDatepicker.value,$scope.customprops){var customProps=[];$scope.customprops.forEach(function(tab){tab.items.forEach(function(prop){prop.value&&customProps.push({id:prop.id,value:prop.value,alias:prop.alias})})});$scope.pipeline.CustomProps=angular.toJson(customProps)}pipelineResource.savePipeline($scope.pipeline).then(function(response){$scope.pipeline=response.data;navigationService.syncTree({tree:"pipelineTree",path:[-1,-1],forceReload:!0});notificationsService.success("OK",$scope.pipeline.Name+" has been saved");$scope.pipelineForm.$dirty=!1})};$scope.archivePipeline=function(){pipelineResource.archivePipeline($scope.pipeline).then(function(){$scope.pipeline.Archived=!0;navigationService.syncTree({tree:"pipelineTree",path:[-1,-1],forceReload:!0});notificationsService.success("OK",$scope.pipeline.Name+" has been archived")})};$scope.restorePipeline=function(){pipelineResource.restorePipeline($scope.pipeline).then(function(){$scope.pipeline.Archived=!1;navigationService.syncTree({tree:"pipelineTree",path:[-1,-1],forceReload:!0});notificationsService.success("OK",$scope.pipeline.Name+" has been restored")})};$scope.duplicatePipeline=function(){pipelineResource.duplicatePipeline($scope.pipeline).then(function(response){navigationService.syncTree({tree:"pipelineTree",path:[-1,-1],forceReload:!0});notificationsService.success("OK",$scope.pipeline.Name+" has been duplicated");location.href="#/pipeline/pipelineTree/edit/"+response.data.Id})};$scope.deletePipeline=function(){var dialog=dialogService.open({template:"/App_Plugins/PipelineApp/dialogs/delete.confirm.html",dialogData:{Type:"opportunity"},callback:function(data){pipelineResource.deleteById($scope.pipeline.Id,data.deleteLinks).then(function(){notificationsService.success("OK","The opportunity has been deleted.");location.href="#/pipeline/pipelineTree/browse/-1"})}})};$scope.addContact=function(){var dialog=dialogService.open({template:"/App_Plugins/PipelineApp/dialogs/contact.add.html",dialogData:{OrganisationId:$scope.pipeline.OrganisationId},callback:function(contact){if($routeParams.Id<0)return notificationsService.error("Nope.","You must save the Opportunity before you add a new Contact."),!1;contactResource.saveContact(contact).then(function(response){var newContact=response.data;$scope.Contacts.push(newContact);$scope.pipeline.Contact=newContact;$scope.pipeline.ContactId=newContact.Id;notificationsService.success("OK",newContact.Name+" has been created");pipelineResource.savePipeline($scope.pipeline)})}})};$scope.addOrganisation=function(){var dialog=dialogService.open({template:"/App_Plugins/PipelineApp/dialogs/organisation.add.html",dialogData:{},callback:function(data){organisationResource.saveOrganisation(data).then(function(response){var newOrg=response.data;$scope.Organisations.unshift(newOrg);$scope.pipeline.Organisation=newOrg;$scope.pipeline.OrganisationId=newOrg.Id;pipelineResource.savePipeline($scope.pipeline);notificationsService.success("OK",newOrg.Name+" has been created")})}})}});angular.module("umbraco").controller("Pipeline.Contact.Browse",function($scope,$routeParams,pipelineResource,organisationResource,contactResource,notificationsService,navigationService,dialogService,entityResource,mediaResource,iconHelper,$filter,localizationService){$scope.content={typeId:$routeParams.id,isArchive:$routeParams.id==-1,title:$routeParams.id==-2?localizationService.localize("pipeline_unassigned"):$routeParams.id==-1?localizationService.localize("recycleBin"):localizationService.localize("pipeline_showAll")};$routeParams.id>0&&contactResource.getContactTypeById($routeParams.id).then(function(response){$scope.content.title=response.data.Name})});angular.module("umbraco").controller("Pipeline.ContactEditController",function($scope,$routeParams,contactResource,pipelineResource,licenseResource,organisationResource,propResource,notificationsService,navigationService,dialogService,entityResource,iconHelper,localizationService){$scope.loaded=!1;contactResource.getContactTypes().then(function(response){$scope.ContactTypes=response.data});$scope.content={tabs:[{id:1,label:localizationService.localize("pipeline_information")},{id:2,label:localizationService.localize("pipeline_timeline")},{id:3,label:localizationService.localize("pipeline_opportunities")}],isArchive:$routeParams.id==-1,isCreate:$routeParams.create};$scope.getCustomProps=function(){propResource.getPropsByType("contact").then(function(response){$scope.customprops=response.data;$scope.customprops.reverse().forEach(function(tab){tab.id=$scope.content.tabs.length+1;$scope.content.tabs.splice(1,0,{id:$scope.content.tabs.length+1,label:tab.name});var customProps=angular.fromJson($scope.contact.CustomProps);$scope.contact.CustomProps&&tab.items.forEach(function(prop){var match=_.findWhere(customProps,{id:prop.id});match&&(prop.value=match.value)})});$(".tab-content>.tab-pane:first").addClass("active");$scope.loaded=!0})};$routeParams.id==-1?($scope.contact={},$scope.contact.Tasks=[],$scope.contact.TypeId=$routeParams.typeId||0,$scope.getCustomProps(),licenseResource.checkContactsLimit().then(function(response){response.data==="false"&&(notificationsService.error(localizationService.localize("pipeline_licenseLimit")),location.href="#/pipeline/pipelineTree/contacts/0")})):contactResource.getContactById($routeParams.id).then(function(response){$scope.contact=$scope.model=response.data;$scope.contact.Obscured&&(notificationsService.error(localizationService.localize("pipeline_licenseLimit")),location.href="#/pipeline/pipelineTree/contacts/0");pipelineResource.getByContactId($routeParams.id).then(function(response){$scope.contact.Pipelines=response.data});$scope.getCustomProps()});$scope.save=function(contact){if($scope.customprops){var customProps=[];$scope.customprops.forEach(function(tab){tab.items.forEach(function(prop){prop.value&&customProps.push({id:prop.id,value:prop.value,alias:prop.alias})})});contact.CustomProps=angular.toJson(customProps)}contactResource.saveContact(contact).then(function(response){$scope.contact=$scope.model=angular.extend($scope.contact,response.data);notificationsService.success("OK",contact.Name+" has been saved");$scope.contactForm.$dirty=!1})};$scope.archiveContact=function(){contactResource.archiveContact($scope.contact).then(function(){$scope.contact.Archived=!0;notificationsService.success("OK",$scope.contact.Name+" has been archived")})};$scope.restoreContact=function(){contactResource.restoreContact($scope.contact).then(function(){$scope.contact.Archived=!1;notificationsService.success("OK",$scope.contact.Name+" has been restored")})};$scope.deleteContact=function(){var dialog=dialogService.open({template:"/App_Plugins/PipelineApp/dialogs/delete.confirm.html",dialogData:{Type:"contact"},callback:function(data){contactResource.deleteById($scope.contact.Id,data.deleteLinks).then(function(){notificationsService.success("OK","Contact has been deleted");location.href="#/pipeline/pipelineTree/contacts/-1"})}})};$scope.selectOrganisation=function(){var dialog=dialogService.open({template:"/App_Plugins/PipelineApp/dialogs/organisation.select.html",dialogData:{Organisations:$scope.contact.Organisations||[]},callback:function(response){$scope.contact.Organisations=_.union($scope.contact.Organisations,response.Organisations);$scope.contact.OrganisationIds=_.pluck($scope.contact.Organisations,"Id").join(",");contactResource.saveContact($scope.contact)}})};$scope.removeOrganisation=function(org){$scope.contact.Organisations=_.reject($scope.contact.Organisations,function(_org){return _org.Id==org.Id});$scope.contact.OrganisationIds=_.pluck($scope.contact.Organisations,"Id").join(",");contactResource.saveContact($scope.contact)};$scope.addOrganisation=function(){licenseResource.checkOrganisationsLimit().then(function(response){if(response.data==="false")notificationsService.error(localizationService.localize("pipeline_licenseLimit"));else var dialog=dialogService.open({template:"/App_Plugins/PipelineApp/dialogs/organisation.add.html",dialogData:{},callback:function(data){organisationResource.saveOrganisation(data).then(function(response){var newOrg=response.data;$scope.contact.Organisations=$scope.contact.Organisations||[];$scope.contact.Organisations.push(newOrg);$scope.contact.OrganisationIds=_.pluck($scope.contact.Organisations,"Id").join(",");notificationsService.success("OK",newOrg.Name+" has been created");contactResource.saveContact($scope.contact)})}})})}});angular.module("umbraco").controller("Pipeline.Organisation.Browse",function($scope,$routeParams,organisationResource,pipelineResource,notificationsService,navigationService,dialogService,entityResource,mediaResource,iconHelper,$filter,localizationService){$scope.content={typeId:$routeParams.id,isArchive:$routeParams.id==-1,title:$routeParams.id==-2?localizationService.localize("pipeline_unassigned"):$routeParams.id==-1?localizationService.localize("recycleBin"):localizationService.localize("pipeline_showAll")};$routeParams.id>0&&organisationResource.getOrganisationTypeById($routeParams.id).then(function(response){$scope.content.title=response.data.Name})});angular.module("umbraco").controller("Pipeline.OrganisationEditController",function($scope,$routeParams,taskResource,contactResource,organisationResource,pipelineResource,licenseResource,propResource,notificationsService,navigationService,dialogService,entityResource,iconHelper,localizationService){$scope.loaded=!1;pipelineResource.getUsers().then(function(response){$scope.Users=response.data});organisationResource.getOrgTypes().then(function(response){$scope.OrgTypes=response.data});$scope.content={tabs:[{id:1,label:localizationService.localize("pipeline_information")},{id:2,label:localizationService.localize("pipeline_timeline")},{id:3,label:localizationService.localize("pipeline_opportunities")}]};$scope.getCustomProps=function(){propResource.getPropsByType("organisation").then(function(response){$scope.customprops=response.data;$scope.customprops.reverse().forEach(function(tab){tab.id=$scope.content.tabs.length+1;$scope.content.tabs.splice(1,0,{id:$scope.content.tabs.length+1,label:tab.name});var customProps=angular.fromJson($scope.organisation.CustomProps);$scope.organisation.CustomProps&&tab.items.forEach(function(prop){var match=_.findWhere(customProps,{id:prop.id});match&&(prop.value=match.value)})});$(".tab-content>.tab-pane:first").addClass("active");$scope.loaded=!0})};$routeParams.id==-1?($scope.organisation=$scope.model={},$scope.organisation.Tasks=[],$scope.organisation.TypeId=$routeParams.typeId||0,$scope.getCustomProps(),licenseResource.checkOrganisationsLimit().then(function(response){response.data==="false"&&(notificationsService.error(localizationService.localize("pipeline_licenseLimit")),location.href="#/pipeline/pipelineTree/organisations/0")})):organisationResource.getOrganisationById($routeParams.id).then(function(response){$scope.organisation=$scope.model=response.data;$scope.organisation.Obscured&&(notificationsService.error(localizationService.localize("pipeline_licenseLimit")),location.href="#/pipeline/pipelineTree/organisations/0");$scope.getCustomProps()});$scope.selectContact=function(){var dialog=dialogService.open({template:"/App_Plugins/PipelineApp/dialogs/contact.select.html",dialogData:{OrganisationId:$scope.organisation.Id,Contacts:$scope.organisation.Contacts||[]},callback:function(response){contactResource.saveContacts(response.Contacts)}})};$scope.addContact=function(){licenseResource.checkContactsLimit().then(function(response){if(response.data==="false")notificationsService.error(localizationService.localize("pipeline_licenseLimit"));else var dialog=dialogService.open({template:"/App_Plugins/PipelineApp/dialogs/contact.add.html",dialogData:{},callback:function(contact){if($routeParams.Id<0)return notificationsService.error("Oops...","You must save the Organisation before you add a new Contact."),!1;contact.OrganisationIds=$scope.organisation.Id.toString();contactResource.saveContact(contact).then(function(response){var newContact=response.data;$scope.organisation.Contacts=$scope.organisation.Contacts||[];$scope.organisation.Contacts.push(newContact);notificationsService.success("OK",newContact.Name+" has been created")})}})})};$scope.removeContact=function(contact){$scope.organisation.Contacts=_.reject($scope.organisation.Contacts,function(_contact){return _contact.Id==contact.Id});var orgIds=contact.OrganisationIds.split(",");orgIds=_.reject(orgIds,function(id){return id==$scope.organisation.Id});contact.OrganisationIds=orgIds.join(",");contactResource.saveContact(contact)};$scope.save=function(organisation){if($scope.customprops){var customProps=[];$scope.customprops.forEach(function(tab){tab.items.forEach(function(prop){prop.value&&customProps.push({id:prop.id,value:prop.value,alias:prop.alias})})});organisation.CustomProps=angular.toJson(customProps)}organisationResource.saveOrganisation(organisation).then(function(response){$scope.organisation=$scope.model=response.data;notificationsService.success("OK",organisation.Name+" has been saved");$scope.organisationForm.$dirty=!1})};$scope.archiveOrg=function(){organisationResource.archiveOrganisation($scope.organisation).then(function(){$scope.organisation.Archived=!0;notificationsService.success("OK",$scope.organisation.Name+" has been archived")})};$scope.restoreOrg=function(){organisationResource.restoreOrganisation($scope.organisation).then(function(){$scope.organisation.Archived=!1;notificationsService.success("OK",$scope.organisation.Name+" has been restored")})};$scope.deleteOrg=function(){var dialog=dialogService.open({template:"/App_Plugins/PipelineApp/dialogs/delete.confirm.html",dialogData:{Type:"organisation"},callback:function(data){organisationResource.deleteOrganisationById($scope.organisation.Id,data.deleteLinks).then(function(){notificationsService.success("OK","Organisation has been deleted");location.href="#/pipeline/pipelineTree/organisations/-1"})}})};$scope.toggleTask=function(task){taskResource.toggleTask(task.Id).then(function(){task.Done=!task.Done})};var findContact=function(contact){var idx=-1;return $scope.organisation.Contacts.forEach(function(obj,i){obj.Id==contact.Id&&(idx=i)}),idx};$scope.OriginOptions=["Recommendation","Umbraco.com","Google","Adwords","Press","Other"]});angular.module("umbraco").controller("Pipeline.Settings",function($scope,$routeParams,pipelineResource,organisationResource,contactResource,prefResource,navigationService,notificationsService,$timeout,localizationService){$scope.loaded=!1;$scope.content={tabs:[{id:1,label:localizationService.localize("pipeline_opportunities")},{id:2,label:localizationService.localize("pipeline_organisations")},{id:3,label:localizationService.localize("pipeline_contacts")},{id:4,label:localizationService.localize("pipeline_notifications")}]};prefResource.getUserPreferences().then(function(response){$scope.preferences=response.data;$scope.digestHour=[{value:"none",name:"None"},{value:"daily",name:"Daily"},{value:"weekly",name:"Weekly"}];$scope.loaded=!0});pipelineResource.getStatuses().then(function(response){$scope.statuses=response.data;$scope.loaded=!0});organisationResource.getOrgTypes().then(function(response){$scope.orgTypes=response.data;$scope.loaded=!0});contactResource.getContactTypes().then(function(response){$scope.contactTypes=response.data;$scope.loaded=!0});$scope.newStatus={};$scope.newType={};$scope.newOrgType={};$scope.newContactType={};$scope.addStatus=function(){$scope.statuses.push({Name:$scope.newStatus.Name,updated:!0});$scope.newStatus.Name=""};$scope.updateStatus=function(status){status.updated=!0};$scope.removeStatus=function(status){status.deleted=!0};$scope.addOrgType=function(){$scope.orgTypes.push({Name:$scope.newOrgType.Name,updated:!0});$scope.newOrgType.Name=""};$scope.updateOrgType=function(type){type.updated=!0};$scope.removeOrgType=function(type){type.deleted=!0};$scope.addContactType=function(){$scope.contactTypes.push({Name:$scope.newContactType.Name,updated:!0});$scope.newContactType.Name=""};$scope.updateContactType=function(type){type.updated=!0};$scope.removeContactType=function(type){type.deleted=!0};$scope.save=function(){$scope.statuses.forEach(function(status){status.updated&&pipelineResource.saveStatus(status);status.deleted&&pipelineResource.deleteStatus(status.Id)});$scope.orgTypes.forEach(function(type){type.updated&&organisationResource.saveOrgType(type);type.deleted&&organisationResource.deleteOrgType(type.Id)});$scope.contactTypes.forEach(function(type){type.updated&&contactResource.saveContactType(type);type.deleted&&contactResource.deleteContactType(type.Id)});prefResource.savePreferences($scope.preferences);notificationsService.success("Changes have been saved");navigationService.syncTree({tree:"pipelineTree",path:[-1,-1],forceReload:!0});$scope.settingsForm.$dirty=!1}});angular.module("umbraco").controller("Pipeline.Grid",function($scope,$routeParams,pipelineResource,organisationResource,contactResource,navigationService,dialogService,notificationsService){function fetchData(){$scope.type=="P"?pipelineResource.getPaged($scope.currentPage,$scope.predicate,$scope.reverse?"desc":"asc",$scope.searchTerm,$scope.contactId||$scope.organisationId?0:$routeParams.id,$scope.contactId,$scope.organisationId).then(function(response){$scope.results=response.data.Pipelines;$scope.totalPages=response.data.TotalPages;$scope.loaded=!0},function(){notificationsService.error("Error","Could not load pipelines")}):$scope.type=="C"?contactResource.getPaged($scope.currentPage,$scope.predicate,$scope.reverse?"desc":"asc",$scope.searchTerm,$routeParams.id).then(function(response){$scope.results=response.data.Contacts;$scope.totalPages=response.data.TotalPages;$scope.loaded=!0},function(){notificationsService.error("Error","Could not load contacts")}):$scope.type=="O"&&organisationResource.getPaged($scope.currentPage,$scope.predicate,$scope.reverse?"desc":"asc",$scope.searchTerm,$routeParams.id).then(function(response){$scope.results=response.data.Organisations;$scope.totalPages=response.data.TotalPages;$scope.loaded=!0},function(){notificationsService.error("Error","Could not load organisations")})}$scope.$watch("type",function(){$scope.type=="P"?pipelineResource.getStatuses().then(function(response){$scope.Statuses=response.data}):$scope.type=="C"?contactResource.getContactTypes().then(function(response){$scope.Types=response.data}):$scope.type=="O"&&organisationResource.getOrgTypes().then(function(response){$scope.Types=response.data})});$scope.loaded=!1;$scope.currentPage=1;$scope.totalPages=1;$scope.reverse=!1;$scope.searchTerm="";$scope.order=function(predicate){$scope.reverse=$scope.predicate===predicate?!$scope.reverse:!1;$scope.predicate=predicate;$scope.currentPage=1;fetchData()};$scope.prevPage=function(){$scope.currentPage>1&&($scope.currentPage--,fetchData())};$scope.nextPage=function(){$scope.currentPage<$scope.totalPages&&($scope.currentPage++,fetchData())};$scope.setPage=function(pageNumber){$scope.currentPage=pageNumber;fetchData()};$scope.search=function(searchFilter){$scope.searchTerm=searchFilter;$scope.currentPage=1;fetchData()};$scope.anySelected=function(){return _.findWhere($scope.results,{selected:!0})};$scope.getNumber=function(num){return new Array(num)};$scope.selectAll=function(){$scope.isSelectedAll=!$scope.isSelectedAll;$scope.results.forEach(function(item){item.selected=$scope.isSelectedAll})};$scope.isRowSelected=function(row){return row.selected};$scope.changeSelected=function(status){var selected=[],confirmation="";$scope.results.forEach(function(item){item.selected&&(status==-1?(item.Archived=!0,confirmation="archived"):status==0?(item.Archived=!1,confirmation="restored"):(item.StatusId=item.TypeId=status.Id,confirmation="moved to "+status.Name),selected.push(item))});selected.length&&($scope.type=="P"?pipelineResource.savePipelines(selected).then(function(){notificationsService.success("OK",selected.length+" items have been "+confirmation);fetchData()}):$scope.type=="O"?organisationResource.saveOrganisations(selected).then(function(){notificationsService.success("OK",selected.length+" items have been "+confirmation);fetchData()}):$scope.type=="C"&&contactResource.saveContacts(selected).then(function(){notificationsService.success("OK",selected.length+" items have been "+confirmation);fetchData()}))};$scope.deleteSelected=function(){var selected=_.where($scope.results,{selected:!0}),selectedIds=_.pluck(selected,"Id").join(","),dialog;selected.length&&(dialog=dialogService.open({template:"/App_Plugins/PipelineApp/dialogs/delete.confirm.html",dialogData:{Type:"group of items"},callback:function(data){$scope.type=="P"?pipelineResource.deletePipelines(selectedIds,data.deleteLinks).then(function(){fetchData()}):$scope.type=="O"?organisationResource.deleteOrganisations(selectedIds,data.deleteLinks).then(function(){fetchData()}):$scope.type=="C"&&contactResource.deleteContacts(selectedIds,data.deleteLinks).then(function(){fetchData()});notificationsService.success("OK",selected.length+" items have been deleted")}}))};$scope.$watchCollection("[type,contactId,organisationId]",function(){$scope.type&&fetchData()})});angular.module("umbraco").controller("Pipeline.Timeline",function($scope,$routeParams,$filter,pipelineResource,dialogService,taskResource,notificationsService){$scope.tasks=$scope.tasks||[];var splitTimeline=function(){$scope.months=[];$filter("orderBy")($scope.tasks,["DateDue","DateCreated"],!0)&&$scope.tasks.forEach(function(task){var sortDate=task.DateDue.indexOf("00:00:00")==-1?task.DateDue:task.DateCreated,created=new Date(sortDate),month=created.getMonth(),year=created.getFullYear(),taskMonth=$scope.months.filter(function(_month){return _month.stamp==month+year})[0]||{title:moment(sortDate).format("MMMM YYYY"),stamp:month+year,tasks:[]};taskMonth.tasks.push(task);taskMonth.tasks.length==1&&$scope.months.unshift(taskMonth)})};$scope.$watch("tasks",function(){splitTimeline()});$scope.editTask=function(task){var dialog=dialogService.open({template:"/App_Plugins/PipelineApp/dialogs/task.add.html",dialogData:task||{},callback:function(newTask){if($routeParams.Id<0)return notificationsService.error("Nope.","You must save the Pipeline before you add a new Touchpoint."),!1;newTask.Member={};newTask=$scope.addParentId(newTask);taskResource.saveTask(newTask).then(function(response){var taskSaved=response.data;task?task=taskSaved:$scope.tasks.push(taskSaved);splitTimeline();notificationsService.success("OK","Touchpoint has been saved")})}})};$scope.deleteTask=function(task){var taskId=task.Id,dialog=dialogService.open({template:"/App_Plugins/PipelineApp/dialogs/delete.confirm.html",dialogData:{Type:"task"},callback:function(){taskResource.deleteById(taskId).then(function(){var tasks=$scope.tasks,idx=$scope.find(tasks,taskId);tasks.splice(idx,1);splitTimeline();notificationsService.success("OK","Task has been deleted")})}})};$scope.shareTask=function(task){var dialog=dialogService.open({template:"/App_Plugins/PipelineApp/dialogs/task.share.html",dialogData:task,callback:function(){}})};$scope.toggleTask=function(task){taskResource.toggleTask(task.Id).then(function(response){task.DateComplete=response.data.DateComplete;task.Done=!task.Done})};$scope.find=function(array,Id){var idx=-1;return array.forEach(function(obj,i){obj.Id==Id&&(idx=i)}),idx};$scope.addParentId=function(newTask){return $scope.parentType=="pipeline"?newTask.PipelineId=newTask.PipelineId||$scope.parent.Id:$scope.parentType=="organisation"?newTask.OrganisationId=newTask.OrganisationId||$scope.parent.Id:$scope.parentType=="contact"&&(newTask.ContactId=newTask.ContactId||$scope.parent.Id),newTask}});angular.module("umbraco").controller("Pipeline.Dashboards.Tasks",function($scope,$routeParams,taskResource){taskResource.getMyTasks().then(function(response){$scope.tasks=response.data;$scope.loaded=!0})});angular.module("umbraco").controller("Pipeline.Dashboards.Pipelines",function($scope,$routeParams,$filter,pipelineResource,licenseResource,organisationResource,dialogService,navigationService,notificationsService,localizationService){$scope.CurrentPage=0;$scope.TotalPages=1;pipelineResource.getStatuses().then(function(response){$scope.Statuses=response.data;$scope.Statuses.unshift({Id:-1,Name:"Unassigned"});$scope.$watch("pipelines",function(){refreshBoard()})});$scope.loadPage=function(){$scope.loadedData=!1;$scope.CurrentPage=$scope.CurrentPage+1;pipelineResource.getPaged($scope.CurrentPage,"","","",0).then(function(response){$scope.TotalPages=response.data.TotalPages;$scope.ItemsPerPage=response.data.ItemsPerPage;$scope.TotalItems=response.data.TotalItems;$scope.PageItems=Math.min($scope.TotalItems,$scope.ItemsPerPage*$scope.CurrentPage);$scope.pipelines=$scope.pipelinesList=_.union($scope.pipelines,response.data.Pipelines);$scope.loadedData=$scope.loaded=!0;refreshBoard()})};$scope.pipelines=$scope.pipelinesList=[];$scope.loadPage();var refreshBoard=function(){$scope.pipelines&&$scope.pipelines.length&&($scope.Statuses.forEach(function(status){status.pipelines=_.filter($scope.pipelines,function(pipeline){return!pipeline.StatusId&&status.Id==-1||pipeline.StatusId==status.Id});var sum=0;status.pipelines.forEach(function(pipeline){sum=sum+$filter("adjustedValue")(pipeline)});status.totalValue=sum}),_.findWhere($scope.pipelines,{Archived:!1,StatusId:0})||$scope.Statuses[0].Id!=-1||$scope.Statuses.shift(),$scope.$$phase||$scope.$apply())};$scope.onDrop=function(pipelineId,statusId){var pipeline=_.findWhere($scope.pipelines,{Id:pipelineId});return pipeline&&pipeline.StatusId!=statusId&&(pipeline.SortOrder=_.filter($scope.pipelines,function(p){return p.StatusId==statusId}).length,pipeline.StatusId=statusId,refreshBoard(),pipelineResource.savePipeline(pipeline).then(function(){navigationService.syncTree({tree:"pipelineTree",path:[-1,-1],forceReload:!0})})),!1};$scope.onCardDrop=function(sourceId,targetId,dropPos){var dragged,dropped,newSlot,list;if(sourceId==targetId)return!1;if(dragged=_.findWhere($scope.pipelines,{Id:sourceId}),dropped=_.findWhere($scope.pipelines,{Id:targetId}),dragged&&dropped){for(dragged.StatusId=dropped.StatusId,newSlot=dropped.SortOrder,dragged.SortOrder=dropPos==0?newSlot:newSlot-1,dropped.SortOrder=dropPos==0?newSlot-1:newSlot,list=_.sortBy(_.filter($scope.pipelines,function(p){return p.StatusId==dropped.StatusId}),"SortOrder"),i=0;i<list.length;i++)list[i].SortOrder=i;refreshBoard();pipelineResource.savePipelines(list).then(function(){navigationService.syncTree({tree:"pipelineTree",path:[-1,-1],forceReload:!0})})}return!1};$scope.previewPipeline=function(pipeline){pipeline.Obscured?notificationsService.error(localizationService.localize("pipeline_licenseLimit")):dialogService.open({template:"/App_Plugins/PipelineApp/dialogs/pipeline.summary.html",dialogData:pipeline})};$scope.addPipeline=function(status){licenseResource.checkPipelineLimit().then(function(response){response.data==="false"?notificationsService.error(localizationService.localize("pipeline_licenseLimit")):dialogService.open({template:"/App_Plugins/PipelineApp/dialogs/pipeline.add.html",dialogData:{StatusId:Math.max(0,status.Id),Status:status},callback:function(pipeline){pipelineResource.quickCreatePipeline(pipeline).then(function(response){$scope.pipelines.push(response.data);refreshBoard();navigationService.syncTree({tree:"pipelineTree",path:[-1,-1],forceReload:!0})})}})})}});angular.module("umbraco").controller("Pipeline.Dialogs.SelectContacts",function($scope,$routeParams,contactResource){$scope.unassigned=[];$scope.$watch("searchTerm",function(){$scope.searchTerm&&$scope.searchTerm.length>1?contactResource.getContactsByName($scope.searchTerm).then(function(response){$scope.unassigned=response.data}):$scope.unassigned=[]});$scope.isSelected=function(contact){return _.findWhere($scope.dialogData.Contacts,{Id:contact.Id})};$scope.toggle=function(contact){$scope.dialogData.Contacts=$scope.dialogData.Contacts||[];var orgIds=contact.OrganisationIds?contact.OrganisationIds.split(","):[];_.findWhere($scope.dialogData.Contacts,{Id:contact.Id})?(orgIds=_.reject(orgIds,function(id){return id==$scope.dialogData.OrganisationId}),$scope.dialogData.Contacts=_.without($scope.dialogData.Contacts,_.findWhere($scope.dialogData.Contacts,{Id:contact.Id}))):(orgIds.push($scope.dialogData.OrganisationId),$scope.dialogData.Contacts.push(contact));contact.OrganisationIds=orgIds.join(",")}});angular.module("umbraco").controller("Pipeline.Dialogs.SelectOrganisations",function($scope,$routeParams,organisationResource){$scope.organisations=[];$scope.$watch("searchTerm",function(){$scope.searchTerm&&$scope.searchTerm.length>1?organisationResource.getOrganisationsByName($scope.searchTerm).then(function(response){$scope.organisations=response.data}):$scope.organisations=[]});$scope.isSelected=function(org){return _.findWhere($scope.dialogData.Organisations,{Id:org.Id})};$scope.toggle=function(org){$scope.dialogData.Organisations=$scope.dialogData.Organisations||[];_.findWhere($scope.dialogData.Organisations,{Id:org.Id})?$scope.dialogData.Organisations=_.without($scope.dialogData.Organisations,_.findWhere($scope.dialogData.Organisations,{Id:org.Id})):$scope.dialogData.Organisations.push(org)}});angular.module("umbraco").controller("Pipeline.Dialogs.Summary",function($scope,$routeParams,taskResource,pipelineResource,dialogService,labelResource){pipelineResource.getUsers().then(function(response){$scope.Users=response.data});labelResource.getAll().then(function(response){$scope.Labels=response.data});$scope.toggleLabel=function(label){var labelIds=$scope.dialogData.LabelIds?$scope.dialogData.LabelIds.split(",").map(Number):[],labels=$scope.dialogData.Labels||[];labelIds.indexOf(label.Id)>-1?(labelIds=_.without(labelIds,label.Id),labels=_.without(labels,_.findWhere(labels,{Id:label.Id}))):(labelIds.push(label.Id),labels.push(label));$scope.dialogData.LabelIds=labelIds?labelIds.join(","):"";$scope.dialogData.Labels=labels;$scope.save()};$scope.save=function(){pipelineResource.savePipeline($scope.dialogData)};$scope.archive=function(){pipelineResource.archivePipeline($scope.dialogData).then(function(){$scope.close();$scope.dialogData.Archived=!0})};$scope.duplicate=function(){pipelineResource.duplicatePipeline($scope.dialogData).then(function(response){$scope.close();notificationsService.success("OK",$scope.pipeline.Name+" has been duplicated");location.href="#/pipeline/pipelineTree/edit/"+response.data.Id})}});angular.module("umbraco").controller("Pipeline.Dialogs.AddTask",function($scope,$routeParams,pipelineResource,dialogService){$scope.isTask=$scope.dialogData.DateDue&&$scope.dialogData.DateDue!="0001-01-01T00:00:00";$scope.toggleTask=function(){$scope.isTask=!$scope.isTask};pipelineResource.getUsers().then(function(response){$scope.Users=response.data});$scope.Types=["Meeting","Call","Email","Send file","Other"];$scope.taskDatepicker={view:"datepicker",config:{pickDate:!0,pickTime:!0,pick12HourFormat:!1,format:"DD/MM/YYYY HH:mm"},value:$scope.dialogData.DateDue&&$scope.dialogData.DateDue.indexOf("0001-01-0")?moment().format("DD/MM/YYYY HH:mm"):$scope.dialogData.DateDue};$scope.reminderDatepicker={view:"datepicker",config:{pickDate:!0,pickTime:!0,pick12HourFormat:!1,format:"DD/MM/YYYY HH:mm"},value:$scope.dialogData.Reminder&&$scope.dialogData.Reminder.indexOf("0001-01-0")?" ":$scope.dialogData.Reminder};$scope.presubmit=function(){$scope.dialogData.DateDue=$scope.isTask?$scope.taskDatepicker.value:"";$scope.dialogData.Reminder=$scope.isTask?$scope.reminderDatepicker.value:"";$scope.dialogData.Overdue=moment().diff($scope.dialogData.DateDue,"days");$scope.submit($scope.dialogData)};$scope.openMediaPicker=function(){dialogService.mediaPicker({multiPicker:!0,callback:function(media){$scope.dialogData.Media=$scope.dialogData.Media||[];media.forEach(function(file){var newMedia={Id:file.id,Name:file.name,Url:file.image};findMedia(newMedia)==-1&&($scope.dialogData.Media.push(newMedia),$scope.dialogData.Files=getMediaIds())})}})};$scope.removeMedia=function(media){$scope.dialogData.Media.splice(findMedia(media),1);$scope.dialogData.Files=getMediaIds()};var getMediaIds=function(){var media=[];return $scope.dialogData.Media?($scope.dialogData.Media.forEach(function(obj){media.push(obj.Id)}),media.join(",")):""},findMedia=function(media){var idx=-1;return $scope.dialogData.Media.forEach(function(obj,i){obj.Id==media.Id&&(idx=i)}),idx}});angular.module("umbraco").controller("Pipeline.Dialogs.ShareTask",function($scope){$scope.permissions=[{id:0,name:"Just me"},{id:1,name:"Pipeline users"},{id:2,name:"Contact"},{id:3,name:"Everyone"}]});angular.module("umbraco").controller("Pipeline.Properties.MediaPicker",function($scope,$routeParams,pipelineResource,dialogService){$scope.openMediaPicker=function(){dialogService.mediaPicker({multiPicker:!0,callback:function(media){$scope.$parent.model.Media=$scope.$parent.model.Media||[];media.forEach(function(file){var newMedia={Id:file.id,Name:file.name,Url:file.image};findMedia(newMedia)==-1&&($scope.$parent.model.Media.push(newMedia),$scope.$parent.model.Files=getMediaIds())})}})};$scope.removeMedia=function(media){$scope.$parent.model.Media.splice(findMedia(media),1);$scope.$parent.model.Files=getMediaIds()};var getMediaIds=function(){var media=[];return $scope.$parent.model.Media?($scope.$parent.model.Media.forEach(function(obj){media.push(obj.Id)}),media.join(",")):""},findMedia=function(media){var idx=-1;return $scope.$parent.model.Media.forEach(function(obj,i){obj.Id==media.Id&&(idx=i)}),idx}});String.prototype.splice=function(idx,rem,s){return this.slice(0,idx)+s+this.slice(idx+Math.abs(rem))};String.prototype.numberify=function(){for(var input=this,point,intDiv,lastComma;input.charAt(0)=="0";)input=input.substr(1);input=input.replace(/[^\d.\',']/g,"");point=input.indexOf(".");point>=0&&(input=input.slice(0,point+3));var decimalSplit=input.split("."),intPart=decimalSplit[0],decPart=decimalSplit[1];if(intPart=intPart.replace(/[^\d]/g,""),intPart.length>3)for(intDiv=Math.floor(intPart.length/3);intDiv>0;)lastComma=intPart.indexOf(","),lastComma<0&&(lastComma=intPart.length),lastComma-3>0&&(intPart=intPart.splice(lastComma-3,0,",")),intDiv--;return decPart=decPart===undefined?"":"."+decPart,intPart+decPart};angular.module("umbraco.directives").directive("currencyInput",function(){return{restrict:"A",scope:{field:"="},replace:!0,template:'<input type="text" class="umb-editor umb-textstring" ng-model="field" ng-required />',link:function(scope,element,attrs){scope.$watch(attrs.ngModel,function(){scope.field&&(scope.field=scope.field.toString().numberify())});$(element).bind("keyup",function(){scope.$apply(function(){scope.field=scope.field.numberify()})})}}}).directive("pipelineTimeline",function(){return{restrict:"E",scope:{tasks:"=",parentType:"=",parent:"=",summary:"="},replace:!0,templateUrl:"/app_plugins/pipelineapp/views/timeline.html"}}).directive("pipelineGrid",function(){return{restrict:"E",scope:{type:"=",statusId:"=",viewId:"=",organisationId:"=",contactId:"="},replace:!0,templateUrl:function(tElement,tAttrs){return"/app_plugins/pipelineapp/views/"+tAttrs.templateUrl}}});angular.module("umbraco.directives").directive("pipelineBoardDrag",function(){return{link:function($scope,element,attrs){var dragData="";$scope.$watch(attrs.pipelineBoardDrag,function(newValue){dragData=newValue});element.bind("dragstart",function(event){event.originalEvent.dataTransfer.setData("Text",dragData.Id)})}}}).directive("pipelineBoardDrop",function(){return{link:function($scope,element){var dragOverClass="over";cancel=function(event){return event.preventDefault&&event.preventDefault(),event.stopPropigation&&event.stopPropigation(),!1};element.bind("dragover",function(event){cancel(event);event.originalEvent.dataTransfer.dropEffect="move";element.addClass(dragOverClass)});element.bind("drop",function(event){cancel(event);element.removeClass(dragOverClass);var droppedData=JSON.parse(event.originalEvent.dataTransfer.getData("Text"));$scope.onDrop(droppedData,+element.attr("statusId"))});element.bind("dragleave",function(){element.removeClass(dragOverClass)})}}}).directive("pipelineBoardCardDrop",function(){return{link:function($scope,element){cancel=function(event){return event.preventDefault&&event.preventDefault(),event.stopPropigation&&event.stopPropigation(),!1};element.bind("dragover",function(event){cancel(event);event.originalEvent.dataTransfer.dropEffect="move";element.parent().addClass(+element.attr("dropPos")>0?"dropBefore":"dropAfter")});element.bind("drop",function(event){cancel(event);element.parent().removeClass("dropBefore").removeClass("dropAfter");var droppedData=JSON.parse(event.originalEvent.dataTransfer.getData("Text"));$scope.onCardDrop(droppedData,+element.attr("pipelineId"),element.attr("dropPos"))});element.bind("dragleave",function(){element.parent().removeClass("dropBefore").removeClass("dropAfter")})}}});angular.module("umbraco.filters").filter("toNumber",function(){return function(input){return input?parseInt(input.toString().replace(",","")):null}}).filter("adjustedValue",function(){return function(pipeline){if(pipeline&&pipeline.Value){var value=parseInt(pipeline.Value.toString().replace(",",""));return pipeline.StatusId==4?0:pipeline.StatusId==3?value:pipeline.Probability?value*pipeline.Probability/100:value}return 0}}).filter("sumPipelineValue",function(){return function(data,byProbability){if(console.log(data),typeof data=="undefined")return 0;var sum=0;return data.forEach(function(pipeline){sum=sum+(byProbability?pipeline.Value*pipeline.Probability/100:pipeline.Value)}),sum}});angular.module("umbraco.resources").factory("pipelineResource",function($http){return{getAll:function(getLinks){return $http.get("/umbraco/backoffice/PipelineApp/PipelineApi/GetAll?getLinks="+getLinks)},getPaged:function(pageNumber,sortColumn,sortOrder,searchTerm,statusId,contactId,organisationId){return $http.get("/umbraco/backoffice/PipelineApp/PipelineApi/GetPaged?pageNumber="+pageNumber+"&sortColumn="+(sortColumn||"")+"&sortOrder="+(sortOrder||"")+"&searchTerm="+searchTerm+"&statusId="+(statusId||0)+"&contactId="+(contactId||0)+"&organisationId="+(organisationId||0))},getUsers:function(){return $http.get("/umbraco/backoffice/PipelineApp/PipelineApi/GetUsers")},getByStatusId:function(id){return id>=0?$http.get("/umbraco/backoffice/PipelineApp/PipelineApi/GetByStatusId?id="+id+"&getLinks=true"):$http.get("/umbraco/backoffice/PipelineApp/PipelineApi/GetArchived")},getPipelineById:function(id){return $http.get("/umbraco/backoffice/PipelineApp/PipelineApi/GetById?id="+id)},getByContactId:function(id){return $http.get("/umbraco/backoffice/PipelineApp/PipelineApi/GetByContactId?id="+id)},getByOrganisationId:function(id){return $http.get("/umbraco/backoffice/PipelineApp/PipelineApi/GetByOrganisationId?id="+id)},savePipeline:function(pipeline){return $http.post("/umbraco/backoffice/PipelineApp/PipelineApi/PostSave",angular.toJson(pipeline))},savePipelines:function(pipelines){return $http.post("/umbraco/backoffice/PipelineApp/PipelineApi/PostSavePipelines",angular.toJson(pipelines))},quickCreatePipeline:function(pipeline){return $http.post("/umbraco/backoffice/PipelineApp/PipelineApi/QuickCreate",angular.toJson(pipeline))},deleteById:function(id,deleteLinks){return $http.delete("/umbraco/backoffice/PipelineApp/PipelineApi/DeleteById?id="+id+"&deleteLinks="+deleteLinks)},deletePipelines:function(ids,deleteLinks){return $http.delete("/umbraco/backoffice/PipelineApp/PipelineApi/DeletePipelinesById?ids="+ids+"&deleteLinks="+deleteLinks)},getStatuses:function(){return $http.get("/umbraco/backoffice/PipelineApp/StatusApi/GetAll")},saveStatus:function(status){return $http.post("/umbraco/backoffice/PipelineApp/StatusApi/PostSave",angular.toJson(status))},deleteStatus:function(status){return $http.delete("/umbraco/backoffice/PipelineApp/StatusApi/DeleteById?id="+status)},getPipelineTasks:function(id){return $http.get("/umbraco/backoffice/PipelineApp/TaskApi/GetByPipeline/"+id)},archivePipeline:function(pipeline){return $http.post("/umbraco/backoffice/PipelineApp/PipelineApi/Archive",angular.toJson(pipeline))},restorePipeline:function(pipeline){return $http.post("/umbraco/backoffice/PipelineApp/PipelineApi/Restore",angular.toJson(pipeline))},duplicatePipeline:function(pipeline){return $http.post("/umbraco/backoffice/PipelineApp/PipelineApi/Duplicate",angular.toJson(pipeline))},getPipelineValue:function(){return $http.get("/umbraco/backoffice/PipelineApp/PipelineApi/GetCurrentValue")},getPendingAnswer:function(){return $http.get("/umbraco/backoffice/PipelineApp/PipelineApi/GetPendingAnswer")},getStatusById:function(id){return $http.get("/umbraco/backoffice/PipelineApp/StatusApi/GetById?id="+id)}}}).factory("taskResource",function($http){return{getMyTasks:function(){return $http.get("/umbraco/backoffice/PipelineApp/TaskApi/GetMyTasks")},saveTask:function(task){return $http.post("/umbraco/backoffice/PipelineApp/TaskApi/PostSave",angular.toJson(task))},deleteById:function(id){return $http.delete("/umbraco/backoffice/PipelineApp/TaskApi/DeleteById?id="+id)},toggleTask:function(id){return $http.post("/umbraco/backoffice/PipelineApp/TaskApi/PostToggle?id="+id)},sendNote:function(id,recipient){return $http.post("/umbraco/backoffice/PipelineApp/TaskApi/SendNote?id="+id+"&recipient="+recipient)}}}).factory("organisationResource",function($http){return{getAll:function(){return $http.get("/umbraco/backoffice/PipelineApp/OrganisationApi/GetAll")},getPaged:function(pageNumber,sortColumn,sortOrder,searchTerm,typeId){return $http.get("/umbraco/backoffice/PipelineApp/OrganisationApi/GetPaged?pageNumber="+pageNumber+"&sortColumn="+(sortColumn||"")+"&sortOrder="+(sortOrder||"")+"&searchTerm="+searchTerm+"&typeId="+(typeId||""))},getOrganisationsByName:function(name){return $http.get("/umbraco/backoffice/PipelineApp/OrganisationApi/GetOrganisationsByName?name="+name)},getOrganisations:function(id){return id==-2?$http.get("/umbraco/backoffice/PipelineApp/OrganisationApi/GetUnassigned"):id==-1?$http.get("/umbraco/backoffice/PipelineApp/OrganisationApi/GetArchived"):id==0?$http.get("/umbraco/backoffice/PipelineApp/OrganisationApi/GetAll"):id>0?$http.get("/umbraco/backoffice/PipelineApp/OrganisationApi/GetByTypeId?id="+id):void 0},getArchived:function(){return $http.get("/umbraco/backoffice/PipelineApp/OrganisationApi/GetArchived")},getOrganisationsByTypeId:function(id){return $http.get("/umbraco/backoffice/PipelineApp/OrganisationApi/GetByTypeId?id="+id)},getUnassigned:function(){return $http.get("/umbraco/backoffice/PipelineApp/OrganisationApi/GetUnassigned")},deleteOrganisationById:function(id,deleteLinks){return $http.delete("/umbraco/backoffice/PipelineApp/OrganisationApi/DeleteById?id="+id+"&deleteLinks="+deleteLinks)},deleteOrganisations:function(ids,deleteLinks){return $http.delete("/umbraco/backoffice/PipelineApp/OrganisationApi/DeleteOrgsById?ids="+ids+"&deleteLinks="+deleteLinks)},getOrganisationById:function(id){return $http.get("/umbraco/backoffice/PipelineApp/OrganisationApi/GetById?id="+id)},archiveOrganisation:function(organisation){return $http.post("/umbraco/backoffice/PipelineApp/OrganisationApi/Archive",angular.toJson(organisation))},restoreOrganisation:function(organisation){return $http.post("/umbraco/backoffice/PipelineApp/OrganisationApi/Restore",angular.toJson(organisation))},saveOrganisation:function(organisation){return $http.post("/umbraco/backoffice/PipelineApp/OrganisationApi/PostSave",angular.toJson(organisation))},saveOrganisations:function(orgs){return $http.post("/umbraco/backoffice/PipelineApp/OrganisationApi/PostSaveOrganisations",angular.toJson(orgs))},getOrgTypes:function(){return $http.get("/umbraco/backoffice/PipelineApp/OrgTypeApi/GetAll")},saveOrgType:function(organisation){return $http.post("/umbraco/backoffice/PipelineApp/OrgTypeApi/PostSave",angular.toJson(organisation))},deleteOrgType:function(organisation){return $http.delete("/umbraco/backoffice/PipelineApp/OrgTypeApi/DeleteById?id="+organisation)},getOrganisationTypeById:function(id){return $http.get("/umbraco/backoffice/PipelineApp/OrgTypeApi/GetById?id="+id)}}}).factory("contactResource",function($http){return{getAll:function(){return $http.get("/umbraco/backoffice/PipelineApp/ContactApi/GetAll")},getPaged:function(pageNumber,sortColumn,sortOrder,searchTerm,typeId){return $http.get("/umbraco/backoffice/PipelineApp/ContactApi/GetPaged?pageNumber="+pageNumber+"&sortColumn="+(sortColumn||"")+"&sortOrder="+(sortOrder||"")+"&searchTerm="+searchTerm+"&typeId="+(typeId||""))},getContactsByName:function(name){return $http.get("/umbraco/backoffice/PipelineApp/ContactApi/GetContactsByName?name="+name)},getContacts:function(id){return id==-2?$http.get("/umbraco/backoffice/PipelineApp/ContactApi/GetUnassigned"):id==-1?$http.get("/umbraco/backoffice/PipelineApp/ContactApi/GetArchived"):id==0?$http.get("/umbraco/backoffice/PipelineApp/ContactApi/GetAll"):id>0?$http.get("/umbraco/backoffice/PipelineApp/ContactApi/GetByContactTypeId?id="+id):void 0},getContactById:function(id){return $http.get("/umbraco/backoffice/PipelineApp/ContactApi/GetById?id="+id)},getByOrganisationId:function(id){return $http.get("/umbraco/backoffice/PipelineApp/ContactApi/GetByOrganisationId?id="+id)},getCustomProps:function(){return $http.get("/umbraco/backoffice/PipelineApp/custompropertyapi/GetCustomProps?type=Contact")},getUnassigned:function(){return $http.get("/umbraco/backoffice/PipelineApp/ContactApi/GetUnassigned")},saveContact:function(contact){return $http.post("/umbraco/backoffice/PipelineApp/ContactApi/PostSave",angular.toJson(contact))},saveContacts:function(contacts){return $http.post("/umbraco/backoffice/PipelineApp/ContactApi/PostSaveContacts",angular.toJson(contacts))},archiveContact:function(contact){return $http.post("/umbraco/backoffice/PipelineApp/ContactApi/Archive",angular.toJson(contact))},restoreContact:function(contact){return $http.post("/umbraco/backoffice/PipelineApp/ContactApi/Restore",angular.toJson(contact))},deleteById:function(id,deleteLinks){return $http.delete("/umbraco/backoffice/PipelineApp/ContactApi/DeleteById?id="+id+"&deleteLinks="+deleteLinks)},deleteContacts:function(ids,deleteLinks){return $http.delete("/umbraco/backoffice/PipelineApp/ContactApi/DeleteContactsById?ids="+ids+"&deleteLinks="+deleteLinks)},getContactTypes:function(){return $http.get("/umbraco/backoffice/PipelineApp/ContactTypeApi/GetAll")},saveContactType:function(type){return $http.post("/umbraco/backoffice/PipelineApp/ContactTypeApi/PostSave",angular.toJson(type))},deleteContactType:function(type){return $http.delete("/umbraco/backoffice/PipelineApp/ContactTypeApi/DeleteById?id="+type)},getContactTypeById:function(id){return $http.get("/umbraco/backoffice/PipelineApp/ContactTypeApi/GetById?id="+id)}}}).factory("labelResource",function($http){return{getAll:function(){return $http.get("/umbraco/backoffice/PipelineApp/LabelApi/GetAll")}}}).factory("propResource",function($http){return{getPropsByType:function(type){return $http.get("/umbraco/backoffice/PipelineApp/custompropertyapi/GetCustomProps?type="+type)}}}).factory("licenseResource",function($http){return{checkPipelineLimit:function(){return $http.get("/umbraco/backoffice/PipelineApp/LicenseApi/GetPipelineLimit")},checkContactsLimit:function(){return $http.get("/umbraco/backoffice/PipelineApp/LicenseApi/GetContactsLimit")},checkOrganisationsLimit:function(){return $http.get("/umbraco/backoffice/PipelineApp/LicenseApi/GetOrganisationsLimit")}}}).factory("prefResource",function($http){return{getUserPreferences:function(){return $http.get("/umbraco/backoffice/PipelineApp/PreferencesApi/GetUserPreferences")},savePreferences:function(preferences){return $http.post("/umbraco/backoffice/PipelineApp/PreferencesApi/PostSave",angular.toJson(preferences))}}});